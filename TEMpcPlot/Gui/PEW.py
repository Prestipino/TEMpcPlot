# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'PEW.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from matplotlib.backends.qt_compat import QtCore, QtWidgets, QtGui  # is_pyqt5,
from matplotlib.backends.backend_qt5agg import (
    FigureCanvas, NavigationToolbar2QT as NavigationToolbar)
from matplotlib.figure import Figure
from os.path import dirname, join, realpath

class C3_slider():
    def __init__(self, parent, layout, label, minimum=None, maximum=None, value=None):
        self.min = minimum if minimum else 0
        self.max = maximum if maximum else 100
        self.frame = QtWidgets.QFrame(parent)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
        self.frame.sizePolicy().hasHeightForWidth())
        self.frame.setSizePolicy(sizePolicy)
        self.frame.setMinimumSize(QtCore.QSize(300, 25))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.label = QtWidgets.QLabel(self.frame)
        self.horizontalLayout_9.addWidget(self.label)

        self.Slider = QtWidgets.QSlider(self.frame)
        self.Slider.setRange(0, 1000)
        self.Slider.setOrientation(QtCore.Qt.Horizontal)
        self.Slider.setObjectName("Slider")
        self.Slider.valueChanged.connect(self.update)
        self.horizontalLayout_9.addWidget(self.Slider)

        # creating a label
        self.labelx = QtWidgets.QLabel("", self.frame)
        # setting geometry to the label
        self.labelx.setGeometry(200, 100, 300, 80)
        # getting current position of the slider
        self.horizontalLayout_9.addWidget(self.labelx)

        #self.lcdNumber = QtWidgets.QLCDNumber(self.frame)
        # self.lcdNumber.setObjectName("lcdNumber_2")
        # self.horizontalLayout_9.addWidget(self.lcdNumber)
        layout.addWidget(self.frame)
        self.label.setText(label)
        if value is not None:
            self.set_value(value)
        # self.Slider.valueChanged['int'].connect(self.lcdNumber.display)

    def update(self, value):
        step = (self.max - self.min) / 1000
        self.labelx.setText(f'{self.min + value * step:.2f}')

    def set_Range(self, minimum, maximum):
        self.min = minimum
        self.max = maximum
        self.update(self.get_value())


    def get_value(self):
        step = (self.max - self.min) / 1000
        value = self.Slider.sliderPosition()
        return self.min + value * step

    def set_value(self, value):
        step = (self.max - self.min) / 1000
        val = (value - self.min) / step
        self.Slider.setValue(int(val))

class EwaldPlot(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self._main = QtWidgets.QWidget()
        self.setCentralWidget(self._main)
        layoutH1 = QtWidgets.QHBoxLayout(self._main)
        ###################################################
        layout_Figure = QtWidgets.QVBoxLayout()
        layoutH1.addLayout(layout_Figure)
        # a figure instance to plot on
        self.figure = Figure(figsize=(7, 7), dpi=100)
        # it takes the `figure` instance as a parameter to __init__
        self.canvas = FigureCanvas(self.figure)
        self.canvas.setSizePolicy(
            QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        self.canvas.updateGeometry()
        layout_Figure.addWidget(self.canvas)
        ###################################################

        layout_Commands = QtWidgets.QVBoxLayout()
        layoutH1.addLayout(layout_Commands)
        ###################################################

        self.checkLeg = QtWidgets.QCheckBox()
        self.checkLeg.setText("Legend")
        layout_Commands.addWidget(self.checkLeg)

        layout_FC = QtWidgets.QHBoxLayout()
        layout_FC.setSpacing(1)
        layout_Commands.addLayout(layout_FC)
        self.FCellButton = QtWidgets.QPushButton("Find Cell")
        layout_FC.addWidget(self.FCellButton)
        label_max = QtWidgets.QLabel("max axis   nm")
        layout_FC.addWidget(label_max)
        layout_FC.setSpacing(0)
        self.MCSpin = QtWidgets.QDoubleSpinBox()
        self.MCSpin.setProperty("value", 2.0)
        self.MCSpin.setObjectName("doubleSpinBox")
        layout_FC.addWidget(self.MCSpin)

        layout_FC = QtWidgets.QHBoxLayout()
        layout_FC.setSpacing(1)
        layout_Commands.addLayout(layout_FC)
        self.RefButton = QtWidgets.QPushButton("Refine")
        layout_FC.addWidget(self.RefButton)
        layout_FC.setSpacing(0)
        self.comboBox_ref = QtWidgets.QComboBox()
        self.comboBox_ref.addItem("axes")
        self.comboBox_ref.addItem("angles")
        self.comboBox_ref.addItem("axes & angle")
        layout_FC.addWidget(self.comboBox_ref)

        ###################################################
        CellgroupBox = QtWidgets.QGroupBox()
        CellgroupBox.setTitle("Cell operations")
        CellgroupBox.setMaximumSize(QtCore.QSize(300, 400))
        layout_Commands.addWidget(CellgroupBox)
        layout_ManInd = QtWidgets.QVBoxLayout(CellgroupBox)
        self.comboBox_abc = QtWidgets.QComboBox()
        self.comboBox_abc.addItem("a*")
        self.comboBox_abc.addItem("b*")
        self.comboBox_abc.addItem("c*")
        layout_ManInd.addWidget(self.comboBox_abc)
        self.AllignButton = QtWidgets.QPushButton('allign along axis')
        layout_ManInd .addWidget(self.AllignButton)
        Def_Layout = QtWidgets.QHBoxLayout()
        layout_ManInd.addLayout(Def_Layout)
        self.DefineButton = QtWidgets.QPushButton('Define axis')
        Def_Layout.addWidget(self.DefineButton)
        label_n = QtWidgets.QLabel("n. ")
        Def_Layout.addWidget(label_n)
        self.spin_n = QtWidgets.QSpinBox()
        self.spin_n.setProperty("value", 1)
        Def_Layout.addWidget(self.spin_n)
        ###################################################

        RotgroupBox = QtWidgets.QGroupBox()
        RotgroupBox.setTitle("Rotations")
        RotgroupBox.setMaximumSize(QtCore.QSize(300, 400))
        layout_Commands.addWidget(RotgroupBox)
        layout_Rot = QtWidgets.QVBoxLayout(RotgroupBox)
        self.comboBox_xyz = QtWidgets.QComboBox()
        self.comboBox_xyz.addItem("x")
        self.comboBox_xyz.addItem("y")
        self.comboBox_xyz.addItem("z")
        layout_Rot.addWidget(self.comboBox_xyz)

        nRot_Layout90 = QtWidgets.QHBoxLayout()
        layout_Rot.addLayout(nRot_Layout90)
        self.Rotp90Button = QtWidgets.QPushButton("Rotate 90")
        nRot_Layout90.addWidget(self.Rotp90Button)
        self.Rotm90Button = QtWidgets.QPushButton("Rotate -90")
        nRot_Layout90.addWidget(self.Rotm90Button)

        nRot_Layout = QtWidgets.QHBoxLayout()
        layout_Rot.addLayout(nRot_Layout)
        self.RotButton = QtWidgets.QPushButton("Rotate")
        nRot_Layout.addWidget(self.RotButton)
        self.spin_r = QtWidgets.QSpinBox()
        nRot_Layout.addWidget(self.spin_r)

        self.RinitButton = QtWidgets.QPushButton("Reinitialize")
        layout_Rot.addWidget(self.RinitButton)
        ###################################################

        FiltgroupBox = QtWidgets.QGroupBox()
        FiltgroupBox.setTitle("Filtering")
        FiltgroupBox.setMaximumSize(QtCore.QSize(300, 400))
        layout_Commands.addWidget(FiltgroupBox)
        layout_Filt = QtWidgets.QVBoxLayout(FiltgroupBox)
        self.Intp_sl = C3_slider(None, layout_Filt, 'Int. < ', 0.0, 100.0, 100)
        self.Intm_sl = C3_slider(None, layout_Filt, 'Int. > ', 0.0, 100.0, 0.0)

        nFilt_Layout = QtWidgets.QHBoxLayout()
        layout_Filt.addLayout(nFilt_Layout)
        self.checkFilt = QtWidgets.QCheckBox()
        self.checkFilt.setText("show only layers")
        nFilt_Layout.addWidget(self.checkFilt)
        self.FiltEdit = QtWidgets.QLineEdit()
        self.FiltEdit.setAlignment(QtCore.Qt.AlignRight)
        nFilt_Layout.addWidget(self.FiltEdit)
        vspace = QtWidgets.QSpacerItem(5, 5, QtWidgets.QSizePolicy.Minimum,
                                       QtWidgets.QSizePolicy.Expanding)
        layout_Commands.addItem(vspace)

if __name__ == "__main__":
    import sys
    qapp = QtWidgets.QApplication.instance()
    if not qapp:
        qapp = QtWidgets.QApplication(sys.argv)
    app = EwaldPlot()
    app.show()
    app.activateWindow()
    app.raise_()
    qapp.exec()
